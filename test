package com.schwab.brokerage.eventhub.rabbit.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.schwab.brokerage.event.parse.service.EventCopybookService;
import com.schwab.brokerage.eventhub.rabbit.config.RabbitRoutingConfigProperties;
import com.schwab.brokerage.eventhub.rabbit.handler.ModernizedEvent;
import com.schwab.brokerage.eventhub.rabbit.model.EventPayload;
import com.schwab.brokerage.eventhub.rabbit.validation.ModernEventValidator;
import com.schwab.brokerage.eventhub.utilities.model.ModernEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import schwab.messaging.client.InvalidMessageException;
import schwab.messaging.client.rabbitmq.Message;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.schwab.brokerage.eventhub.rabbit.config.RabbitRoutingConfigProperties.Target;
import static com.schwab.brokerage.eventhub.rabbit.constants.RabbitPublisherConstants.OBJECT_ID;
import static com.schwab.brokerage.eventhub.rabbit.constants.RabbitPublisherConstants.PUBHUB_COPYBOOK_NAME;
import static com.schwab.brokerage.eventhub.rabbit.constants.RabbitPublisherConstants.PUBHUB_DESTINATION_NAME;

@Component
public class RabbitPublisherService {

    private final EventCopybookService eventCopybookService;
    private final ObjectMapper objectMapper;
    private final Map<String, Target> eventDestinations;
    private final ModernEventValidator modernEventValidator;

    @Autowired
    public RabbitPublisherService(
            EventCopybookService eventCopybookService,
            RabbitRoutingConfigProperties properties,
            ModernEventValidator modernEventValidator,
            ObjectMapper objectMapper) {
        this.eventCopybookService = eventCopybookService;
        this.objectMapper = objectMapper;
        this.eventDestinations = properties.getEventDestinations();
        this.modernEventValidator = modernEventValidator;
    }

    public List<ModernEvent> buildModernizedEvents(Message message, ModernizedEvent modernizedEvent) throws IOException, InvalidMessageException {
        // Build and Validate the ModernEvent
        ModernEvent modernEvent = objectMapper.readValue(message.getText(), ModernEvent.class);
        modernEventValidator.validateEvent(modernEvent);
        modernizedEvent.log("Built Modern Event");

        // Build and Validate the Headers
        Map<String, String> headers = new HashMap<>();
        message.getProperties().getHeaders().forEach((k, v) -> headers.put(k, Objects.toString(v, null)));
        final Target target = modernEventValidator.validateDestination(eventDestinations, headers);
        String routingKey = target.getRoutingKey();

        // Check for PubHub-Replay-Consumer-override header
        String overrideHeader = headers.get("PubHub-Replay-Consumer-override");
        List<ModernEvent> modernEvents = new ArrayList<>();

        if (overrideHeader != null && !overrideHeader.isEmpty()) {
            String[] overrideValues = overrideHeader.split(",");
            for (String overrideValue : overrideValues) {
                String updatedRoutingKey = routingKey + "." + overrideValue.trim().toLowerCase();

                headers.put(OBJECT_ID, String.valueOf(modernEvent.getEvent().getHeaderData().getPublishServiceInformation().getObjectIdentifier()));
                headers.put(PUBHUB_COPYBOOK_NAME, String.valueOf(modernEvent.getEvent().getHeaderData().getCopybookName()));
                headers.put(PUBHUB_DESTINATION_NAME, updatedRoutingKey);
                modernizedEvent.log("Built Headers with override: " + overrideValue.trim().toLowerCase());

                // Update the Modernized Event for this override value
                ModernEvent clonedEvent = objectMapper.readValue(objectMapper.writeValueAsString(modernEvent), ModernEvent.class);
                clonedEvent.getEvent().getHeaderData().setEventName(updatedRoutingKey);

                String eventPayloadJson = generateEventPayloadJson(clonedEvent);
                modernizedEvent.setJson(target.getTarget() != TargetType.MF2DIST ? eventPayloadJson : generateMf2DistTemplateJson(eventPayloadJson, headers));
                modernizedEvent.getLogMessageDetails().addExtendedField(EVENT_DATA_SECURE_FIELD, modernizedEvent.getJson()).addExtendedFields(headers);

                modernEvents.add(clonedEvent);
            }
        } else {
            // No override header, process normally
            headers.put(OBJECT_ID, String.valueOf(modernEvent.getEvent().getHeaderData().getPublishServiceInformation().getObjectIdentifier()));
            headers.put(PUBHUB_COPYBOOK_NAME, String.valueOf(modernEvent.getEvent().getHeaderData().getCopybookName()));
            headers.put(PUBHUB_DESTINATION_NAME, routingKey);
            modernizedEvent.log("Built Headers without override");

            modernEvent.getEvent().getHeaderData().setEventName(routingKey);

            String eventPayloadJson = generateEventPayloadJson(modernEvent);
            modernizedEvent.setJson(target.getTarget() != TargetType.MF2DIST ? eventPayloadJson : generateMf2DistTemplateJson(eventPayloadJson, headers));
            modernizedEvent.getLogMessageDetails().addExtendedField(EVENT_DATA_SECURE_FIELD, modernizedEvent.getJson()).addExtendedFields(headers);

            modernEvents.add(modernEvent);
        }

        return modernEvents;
    }

    String generateMf2DistTemplateJson(String eventPayloadJson, Map<String, String> headers) throws InvalidMessageException {
        try {
            EventCopybook eventCopybook = EventCopybook.fromCopybookName(headers.get(PUBHUB_COPYBOOK_NAME));
            MainframeEvent mainframeEvent = eventCopybookService.fromJson(eventCopybook, eventPayloadJson);
            String template = eventCopybookService.toTemplate(mainframeEvent, EventTemplate.MF_TO_DIST, null);
            modernEventValidator.validateJson(template, objectMapper);
            return template;
        } catch (Exception e) {
            throw new InvalidMessageException(e);
        }
    }

    String generateEventPayloadJson(ModernEvent modernEvent) throws InvalidMessageException {
        try {
            EventPayload eventPayload = EventPayload.builder()
                    .payloadData(modernEvent.getEvent().getPayloadData())
                    .headerData(modernEvent.getEvent().getHeaderData())
                    .build();
            return objectMapper.writeValueAsString(eventPayload);
        } catch (Exception e) {
            throw new InvalidMessageException(e);
        }
    }
}
