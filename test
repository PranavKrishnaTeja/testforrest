package com.schwab.cdt.spos.source.service;

import com.schwab.cdt.spos.source.config.IngestionJobConfig;
import com.schwab.cdt.spos.source.job.DataIngestionJobBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobParametersInvalidException;
import org.springframework.batch.core.repository.JobRestartException;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BatchServiceTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private IngestionJobConfig ingestionJobConfig;

    @Mock
    private DataIngestionJobBuilder dataIngestionJobBuilder;

    @InjectMocks
    private BatchService batchService;

    private IngestionJobConfig.Job mockJob;

    @BeforeEach
    void setUp() {
        mockJob = new IngestionJobConfig.Job(
                "testJob",
                "source",
                "target",
                "sourceDocumentId",
                "targetId"
        );

        when(ingestionJobConfig.jobs()).thenReturn(List.of(mockJob));
    }

    @Test
    void start_shouldRunCassandraJob() throws JobInstanceAlreadyCompleteException, JobExecutionAlreadyRunningException, JobParametersInvalidException, JobRestartException {
        when(dataIngestionJobBuilder.cassandraDataIngestionJob()).thenReturn(mock(Job.class));
        mockJob = new IngestionJobConfig.Job(
                "testJob",
                "source",
                "cassandra",
                "sourceDocumentId",
                "targetId"
        );

        when(ingestionJobConfig.jobs()).thenReturn(List.of(mockJob));

        batchService.start("testJob");

        verify(jobLauncher).run(any(Job.class), any(JobParameters.class));
    }

    @Test
    void start_shouldRunPostgresJob() throws JobInstanceAlreadyCompleteException, JobExecutionAlreadyRunningException, JobParametersInvalidException, JobRestartException {
        when(dataIngestionJobBuilder.postgresDataIngestionJob()).thenReturn(mock(Job.class));

        batchService.start("testJob");

        verify(jobLauncher).run(any(Job.class), any(JobParameters.class));
    }

    @Test
    void start_shouldThrowUnsupportedOperationExceptionIfJobNotFound() {
        when(ingestionJobConfig.jobs()).thenReturn(List.of());

        assertThrows(UnsupportedOperationException.class, () -> batchService.start("nonExistentJob"));
    }

    @Test
    void jobLookUpWithMetadata_shouldReturnJobMetadata() {
        Map<String, String> metadata = batchService.jobLookUpWithMetadata("testJob");

        assert metadata.equals(Map.of(
            "jobName", "testJob",
            "source", "source",
            "target", "target",
            "documentId", mockJob.sourceDocumentId(),
            "targetId", "targetId"
        ));
    }

    @Test
    void jobLookUpWithMetadata_shouldThrowUnsupportedOperationExceptionIfJobNotFound() {
        when(ingestionJobConfig.jobs()).thenReturn(List.of());

        assertThrows(UnsupportedOperationException.class, () -> batchService.jobLookUpWithMetadata("nonExistentJob"));
    }
}