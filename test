import com.schwab.cdt.spos.source.job.step.reader.SposItemReader;
import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.file.DataFileStream;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.io.DatumReader;
import org.apache.avro.specific.SpecificDatumReader;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.batch.item.ExecutionContext;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

class SposItemReaderTest {

    private SposItemReader sposItemReader;
    private SposStreamingClient sposStreamingClient;
    private final String documentId = "test_document";

    @BeforeEach
    void setUp() throws Exception {
        sposStreamingClient = mock(SposStreamingClient.class);
        sposItemReader = new SposItemReader(sposStreamingClient, documentId);
    }

    @Test
    void testOpen() throws Exception {
        // Arrange
        when(sposStreamingClient.getObjectWithByteRange(anyString(), anyLong(), anyLong()))
                .thenReturn(getAvroSerializedData());
        
        // Act
        sposItemReader.open(new ExecutionContext());

        // Assert
        assertNotNull(sposItemReader);
        verify(sposStreamingClient, times(1)).getObjectWithByteRange(anyString(), anyLong(), anyLong());
    }

    @Test
    void testRead() throws Exception {
        // Arrange
        when(sposStreamingClient.getObjectWithByteRange(anyString(), anyLong(), anyLong()))
                .thenReturn(getAvroSerializedData());

        sposItemReader.open(new ExecutionContext());

        // Act
        GenericRecord result = sposItemReader.read();

        // Assert
        assertNotNull(result);
        assertEquals("testValue", result.get("testField").toString());
    }

    @Test
    void testClose() throws Exception {
        // Arrange
        sposItemReader.open(new ExecutionContext());

        // Act
        sposItemReader.close();

        // Assert
        assertNull(sposItemReader.read());
    }

    private byte[] getAvroSerializedData() {
        // Mock Avro serialized data
        String avroData = "{\"testField\": \"testValue\"}";
        return avroData.getBytes();
    }
}
