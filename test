import com.schwab.cdt.spos.source.config.CsvToAvroConfig;
import com.schwab.cdt.spos.source.config.IngestionJobConfig;
import com.schwab.cdt.spos.source.service.CsvToAvroConverter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.scope.context.StepSynchronizationManager;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class CsvToAvroConversionStepTest {

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager transactionManager;

    @Mock
    private CsvToAvroConverter csvToAvroConverter;

    @Mock
    private CsvToAvroConfig csvToAvroConfig;

    @Mock
    private IngestionJobConfig ingestionJobConfig;

    @InjectMocks
    private CsvToAvroConversionStep csvToAvroConversionStep;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testCsvToAvroConversionStep_success() throws Exception {
        // Arrange
        CsvToAvroConfig.Conversion conversion = new CsvToAvroConfig.Conversion("test-conversion");
        when(csvToAvroConfig.getConversions()).thenReturn(List.of(conversion));
        IngestionJobConfig.Job job = new IngestionJobConfig.Job("test-job", "test-source-dir");
        when(ingestionJobConfig.jobs()).thenReturn(List.of(job));

        StepContext stepContext = StepSynchronizationManager.register(new StepContext(new StepExecution("test-step", null)));
        stepContext.getStepExecution().getJobParameters().put("jobName", "test-job");
        stepContext.getStepExecution().getJobParameters().put("directory", "test-conversion");

        // Act
        Step step = csvToAvroConversionStep.csvToAvroConversionStep();
        step.execute(null, null);

        // Assert
        verify(csvToAvroConverter, times(1)).convertCsvToAvro(conversion, "test-source-dir");
    }

    @Test
    void testCsvToAvroConversionStep_conversionNotFound() {
        // Arrange
        when(csvToAvroConfig.getConversions()).thenReturn(List.of());

        StepContext stepContext = StepSynchronizationManager.register(new StepContext(new StepExecution("test-step", null)));
        stepContext.getStepExecution().getJobParameters().put("jobName", "test-job");
        stepContext.getStepExecution().getJobParameters().put("directory", "non-existent-conversion");

        // Act & Assert
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Step step = csvToAvroConversionStep.csvToAvroConversionStep();
            step.execute(null, null);
        });

        assertTrue(exception.getMessage().contains("Conversion with name non-existent-conversion not found."));
    }

    @Test
    void testCsvToAvroConversionStep_jobNotFound() {
        // Arrange
        when(ingestionJobConfig.jobs()).thenReturn(List.of());

        StepContext stepContext = StepSynchronizationManager.register(new StepContext(new StepExecution("test-step", null)));
        stepContext.getStepExecution().getJobParameters().put("jobName", "non-existent-job");
        stepContext.getStepExecution().getJobParameters().put("directory", "test-conversion");

        // Act & Assert
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            Step step = csvToAvroConversionStep.csvToAvroConversionStep();
            step.execute(null, null);
        });

        assertTrue(exception.getMessage().contains("Job non-existent-job not found"));
    }

    @Test
    void testCsvToAvroConversionStep_conversionFails() throws Exception {
        // Arrange
        CsvToAvroConfig.Conversion conversion = new CsvToAvroConfig.Conversion("test-conversion");
        when(csvToAvroConfig.getConversions()).thenReturn(List.of(conversion));
        IngestionJobConfig.Job job = new IngestionJobConfig.Job("test-job", "test-source-dir");
        when(ingestionJobConfig.jobs()).thenReturn(List.of(job));

        StepContext stepContext = StepSynchronizationManager.register(new StepContext(new StepExecution("test-step", null)));
        stepContext.getStepExecution().getJobParameters().put("jobName", "test-job");
        stepContext.getStepExecution().getJobParameters().put("directory", "test-conversion");

        doThrow(new RuntimeException("Conversion error")).when(csvToAvroConverter).convertCsvToAvro(conversion, "test-source-dir");

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            Step step = csvToAvroConversionStep.csvToAvroConversionStep();
            step.execute(null, null);
        });

        assertTrue(exception.getMessage().contains("Failed to convert CSV to Avro for conversion"));
    }
}
