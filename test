import com.schwab.cdt.spos.source.job.step.reader.SposItemReader;
import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.apache.avro.file.DataFileStream;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.ExecutionContext;

import java.io.IOException;
import java.io.PipedInputStream;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

class SposItemReaderTest {

    @Mock
    private SposStreamingClient sposStreamingClient;

    @Mock
    private PipedInputStream pipedInputStream;

    @Mock
    private DataFileStream<GenericRecord> dataFileStream;

    @InjectMocks
    private SposItemReader sposItemReader;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        sposItemReader = new SposItemReader(sposStreamingClient, "documentId");
        sposItemReader.setExecutionContext(new ExecutionContext());
    }

    @Test
    void testDoOpen() throws Exception {
        // Mock thread and stream service behavior
        Thread mockThread = mock(Thread.class);
        doNothing().when(mockThread).start();

        // Start the reader
        sposItemReader.open(new ExecutionContext());

        // Assert that the dataFileStream is not null after opening
        assertNotNull(sposItemReader);
    }

    @Test
    void testDoRead() throws Exception {
        // Mock the DataFileStream to return a record
        sposItemReader.open(new ExecutionContext());
        when(dataFileStream.iterator()).thenReturn(mock(Iterator.class));
        when(dataFileStream.iterator().hasNext()).thenReturn(true);
        when(dataFileStream.iterator().next()).thenReturn(mock(GenericRecord.class));

        // Invoke the reader's doRead method and assert the result
        GenericRecord result = sposItemReader.read();
        assertNotNull(result);

        // Test when there's no more data to read
        when(dataFileStream.iterator().hasNext()).thenReturn(false);
        result = sposItemReader.read();
        assertNull(result);
    }

    @Test
    void testDoClose() throws Exception {
        // Mock closing behavior
        sposItemReader.open(new ExecutionContext());
        doNothing().when(dataFileStream).close();

        // Invoke close method
        sposItemReader.close();

        // Verify the stream was closed
        verify(dataFileStream, times(1)).close();
    }
}
