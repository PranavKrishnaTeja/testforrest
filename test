package com.schwab.cdt.spos.source.service;

import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import schwab.discovery.client.EndpointNotFoundException;
import schwab.discovery.client.ServiceRegistryException;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

class StreamServiceTest {

    @Mock
    private SposStreamingClient sposStreamingClient;

    @Mock
    private PipedInputStream pipedInputStream;

    @Mock
    private PipedOutputStream pipedOutputStream;

    private StreamService streamService;

    private final String documentId = "testDocumentId";
    private final long fileSize = 100L;

    @BeforeEach
    void setUp() throws EndpointNotFoundException, IOException, ServiceRegistryException {
        MockitoAnnotations.openMocks(this);
        when(sposStreamingClient.getObjectSize(documentId)).thenReturn(fileSize);
        when(sposStreamingClient.getObjectWithByteRange(eq(documentId), anyLong(), anyLong())).thenReturn(new byte[10]);
        streamService = new StreamService(sposStreamingClient, pipedInputStream, documentId);
    }

    @Test
    void run() throws IOException, InterruptedException {
        Thread streamThread = new Thread(streamService);
        streamThread.start();
        streamThread.join(); // Wait for the thread to complete

        verify(sposStreamingClient, times((int) Math.ceil(fileSize / (double) StreamService.CHUNK_SIZE))).getObjectWithByteRange(eq(documentId), anyLong(), anyLong());
        verify(pipedOutputStream, never()).connect(any(PipedInputStream.class)); // Ensure it's not connecting inappropriately
    }
}