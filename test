package com.schwab.cdt.spos.source.job;

import com.schwab.cdt.spos.source.logger.LogRecordCreator;
import com.schwab.pce.common.logging.eli.enums.ServiceCallType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.context.ApplicationContext;

import java.time.LocalDateTime;

import static org.mockito.Mockito.*;

class DataIngestionJobListenerTest {

    @Mock
    private LogRecordCreator logRecordCreator;

    @Mock
    private ApplicationContext applicationContext;

    @Mock
    private JobExecution jobExecution;

    @InjectMocks
    private DataIngestionJobListener dataIngestionJobListener;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void afterJob_logsOutboundMessage_andExitsApplicationOnSuccess() {
        // Arrange
        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = LocalDateTime.now();

        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);
        when(jobExecution.getStartTime()).thenReturn(java.sql.Timestamp.valueOf(startTime));
        when(jobExecution.getEndTime()).thenReturn(java.sql.Timestamp.valueOf(endTime));

        // Act
        dataIngestionJobListener.afterJob(jobExecution);

        // Assert
        verify(logRecordCreator, times(1)).toOutBound(
            anyString(),
            eq("ControlM Pcf Task"),
            eq(startTime),
            anyMap(),
            isNull(),
            eq(ServiceCallType.RPC),
            isNull(),
            isNull(),
            isNull(),
            isNull()
        );
        verify(applicationContext, times(1)).close();
    }

    @Test
    void afterJob_logsOutboundMessage_andExitsApplicationOnFailure() {
        // Arrange
        LocalDateTime startTime = LocalDateTime.now();
        LocalDateTime endTime = LocalDateTime.now();

        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(jobExecution.getStartTime()).thenReturn(java.sql.Timestamp.valueOf(startTime));
        when(jobExecution.getEndTime()).thenReturn(java.sql.Timestamp.valueOf(endTime));

        // Act
        dataIngestionJobListener.afterJob(jobExecution);

        // Assert
        verify(logRecordCreator, times(1)).toOutBound(
            anyString(),
            eq("ControlM Pcf Task"),
            eq(startTime),
            anyMap(),
            isNull(),
            eq(ServiceCallType.RPC),
            isNull(),
            isNull(),
            isNull(),
            isNull()
        );
        verify(applicationContext, times(1)).close();
    }
}