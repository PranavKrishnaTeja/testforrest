import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import schwab.discovery.client.EndpointNotFoundException;
import schwab.discovery.client.ServiceRegistryException;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StreamServiceTest {

    @Mock
    private SposStreamingClient sposStreamingClient;

    private StreamService streamService;
    private PipedInputStream pipedInputStream;
    private PipedOutputStream pipedOutputStream;

    @BeforeEach
    void setUp() throws EndpointNotFoundException, IOException, ServiceRegistryException {
        MockitoAnnotations.openMocks(this);
        pipedInputStream = new PipedInputStream();
        pipedOutputStream = new PipedOutputStream(pipedInputStream);
        String documentId = "test_documentId.avro";
        when(sposStreamingClient.getObjectSize(documentId)).thenReturn(1024L);
        streamService = new StreamService(sposStreamingClient, pipedInputStream, documentId);
    }

    @Test
    void testRun() throws Exception {
        String documentId = "test_documentId.avro";
        byte[] testData = new byte[1024];
        when(sposStreamingClient.getObjectWithByteRange(documentId, 0, 1024)).thenReturn(testData);

        Thread thread = new Thread(streamService);
        thread.start();
        thread.join();

        byte[] buffer = new byte[1024];
        int bytesRead = pipedInputStream.read(buffer);

        assertEquals(1024, bytesRead);
        assertArrayEquals(testData, buffer);
    }

    @Test
    void testRunWithException() throws Exception {
        String documentId = "test_documentId.avro";
        when(sposStreamingClient.getObjectWithByteRange(documentId, 0, 1024)).thenThrow(new IOException("Test Exception"));

        Thread thread = new Thread(streamService);
        thread.start();
        thread.join();

        // Check if exception is handled and appropriate logging is done (if implemented)
        // Since the code has a TODO for logging, you can verify using System.out.println if required
    }
}
