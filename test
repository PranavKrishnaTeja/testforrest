package com.schwab.cdt.spos.source.job.step;

import com.schwab.cdt.spos.source.config.ArcataConfig;
import com.schwab.cdt.spos.source.config.SposConfig;
import com.schwab.cdt.spos.source.logger.LogRecordCreator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.StepExecution;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class DataIngestionStepExecutionListenerTest {

    @InjectMocks
    private DataIngestionStepExecutionListener listener;

    @Mock
    private SposConfig sposConfig;

    @Mock
    private ArcataConfig arcataConfig;

    @Mock
    private LogRecordCreator logRecordCreator;

    @Mock
    private StepExecution stepExecution;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void beforeStep_shouldLogStepNameAndFailureExceptions() {
        // Arrange
        when(sposConfig.bucket()).thenReturn("testBucket");
        when(sposConfig.serviceKey()).thenReturn("testServiceKey");
        when(sposConfig.port()).thenReturn("testPort");
        when(arcataConfig.getEndpoint()).thenReturn(mock(Endpoint.class));
        when(arcataConfig.getEndpoint().getUrl()).thenReturn("http://test-endpoint");
        when(stepExecution.getStartTime()).thenReturn(LocalDateTime.now());
        when(stepExecution.getStepName()).thenReturn("stepExecutionStepName");

        // Act
        listener.beforeStep(stepExecution);

        // Assert
        verify(logRecordCreator, times(1)).toOutBound(any(), eq("stepExecutionStepName"), any(), anyMap(), isNull(), eq(ServiceCallType.RPC), eq("testServiceKey"), eq("http://test-endpoint"), eq("testPort"), isNull());
    }

    @Test
    void afterStep_shouldReturnExitStatus() {
        // Arrange
        ExitStatus exitStatus = ExitStatus.COMPLETED;
        when(stepExecution.getExitStatus()).thenReturn(exitStatus);

        // Act
        ExitStatus result = listener.afterStep(stepExecution);

        // Assert
        assertEquals(exitStatus, result);
    }
}