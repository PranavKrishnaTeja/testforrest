package com.schwab.cdt.spos.source.job.step;

import com.schwab.cdt.spos.source.config.CsvToAvroConfig;
import com.schwab.cdt.spos.source.converter.CsvToAvroConverter;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.PlatformTransactionManager;

import java.io.IOException;

@Component
public class CsvToAvroConversionStep {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;
    private final CsvToAvroConverter csvToAvroConverter;
    private final CsvToAvroConfig csvToAvroConfig;

    public CsvToAvroConversionStep(JobRepository jobRepository,
                                   PlatformTransactionManager transactionManager,
                                   CsvToAvroConverter csvToAvroConverter,
                                   CsvToAvroConfig csvToAvroConfig) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
        this.csvToAvroConverter = csvToAvroConverter;
        this.csvToAvroConfig = csvToAvroConfig;
    }

    public Step csvToAvroConversionStep() {
        return new StepBuilder("csvToAvroConversionStep", jobRepository)
            .task((contribution, chunkContext) -> {
                // Iterate over all conversions defined in YAML
                for (CsvToAvroConfig.Conversion conversion : csvToAvroConfig.getConversions()) {
                    try {
                        csvToAvroConverter.convertCsvToAvro(
                            conversion.getSourceFile(),
                            conversion.getAvroSchema(),
                            conversion.getTargetAvroFile(),
                            conversion.getDelimiter()
                        );
                    } catch (IOException e) {
                        throw new RuntimeException("Failed to convert CSV to Avro: " + e.getMessage(), e);
                    }
                }
                return org.springframework.batch.repeat.RepeatStatus.FINISHED;
            })
            .transactionManager(transactionManager)
            .build();
    }
}








@Bean
public JobRepository jobRepository(DataSource dataSource, PlatformTransactionManager transactionManager) throws Exception {
    JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();
    factory.setDataSource(dataSource);
    factory.setTransactionManager(transactionManager);
    factory.afterPropertiesSet();
    return factory.getObject();
}








package com.schwab.cdt.spos.source.job;

import com.schwab.cdt.spos.source.job.step.CsvToAvroConversionStep;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.transaction.PlatformTransactionManager;

@Configuration
public class DataIngestionJobBuilder {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;
    private final DataIngestionStepBuilder dataIngestionStepBuilder;
    private final DataIngestionJobListener dataIngestionJobListener;
    private final CsvToAvroConversionStep csvToAvroConversionStep;

    public DataIngestionJobBuilder(DataIngestionStepBuilder dataIngestionStepBuilder,
                                   JobRepository jobRepository,
                                   PlatformTransactionManager transactionManager,
                                   DataIngestionJobListener dataIngestionJobListener,
                                   CsvToAvroConversionStep csvToAvroConversionStep) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
        this.dataIngestionStepBuilder = dataIngestionStepBuilder;
        this.dataIngestionJobListener = dataIngestionJobListener;
        this.csvToAvroConversionStep = csvToAvroConversionStep;
    }

    @Bean(name = "csvToAvroDataIngestionJob")
    public Job csvToAvroDataIngestionJob() {
        return new JobBuilder("csvToAvroDataIngestionJob", jobRepository)
            .incrementer(new org.springframework.batch.core.launch.support.RunIdIncrementer())
            .listener(dataIngestionJobListener)
            .preventRestart()
            .start(csvToAvroConversionStep.csvToAvroConversionStep())
            .next(dataIngestionStepBuilder.avroDataIngestionStep())
            .build();
    }
}









package com.schwab.cdt.spos.source.job.step;

import org.springframework.batch.core.Step;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
// ... other imports

@Configuration
public class DataIngestionStepBuilder {

    private final JobRepository jobRepository;
    private final PlatformTransactionManager transactionManager;
    // ... other dependencies

    public DataIngestionStepBuilder(JobRepository jobRepository,
                                    PlatformTransactionManager transactionManager,
                                    // ... other dependencies
                                    ) {
        this.jobRepository = jobRepository;
        this.transactionManager = transactionManager;
        // ... initialize other dependencies
    }

    @Bean(name = "avroDataIngestionStep")
    public Step avroDataIngestionStep() {
        return new StepBuilder("avroDataIngestionMasterStep", jobRepository)
            .partitioner("avroDataIngestionSlaveStep", partitioner)
            .step(avroDataIngestionSlaveStep())
            .taskExecutor(this.taskExecutor)
            .build();
    }

    public Step avroDataIngestionSlaveStep() {
        return new StepBuilder("avroDataIngestionSlaveStep", jobRepository)
            .<GenericRecord, AggregateFactory.Aggregate>chunk(this.chunkSize, transactionManager)
            .faultTolerant()
            .skipPolicy(skipPolicy)
            .listener(stepExecutionListener)
            .reader(avroItemReader)
            .listener(itemReadListener)
            .processor(sposItemProcessor)
            .writer(postgresItemWriter)
            .listener(postgresItemWriteListener)
            .retryLimit(3)
            .retry(org.springframework.dao.TransientDataAccessException.class)
            .build();
    }
    // ... other steps
}









