public class CsvItemReader extends FlatFileItemReader<YourCustomRecord> {

    public CsvItemReader(Resource resource) {
        setResource(resource);
        setLinesToSkip(1); // Skip header
        setLineMapper(new DefaultLineMapper<YourCustomRecord>() {{
            setLineTokenizer(new DelimitedLineTokenizer() {{
                setNames("field1", "field2", "field3"); // Define fields
            }});
            setFieldSetMapper(new BeanWrapperFieldSetMapper<YourCustomRecord>() {{
                setTargetType(YourCustomRecord.class);
            }});
        }});
    }
}





public class CsvToAvroProcessor implements ItemProcessor<YourCustomRecord, GenericRecord> {

    private final Schema avroSchema;

    public CsvToAvroProcessor(Schema avroSchema) {
        this.avroSchema = avroSchema;
    }

    @Override
    public GenericRecord process(YourCustomRecord item) {
        GenericRecord avroRecord = new GenericData.Record(avroSchema);
        avroRecord.put("field1", item.getField1());
        avroRecord.put("field2", item.getField2());
        // Map all fields
        return avroRecord;
    }
}








public class AvroItemWriter implements ItemWriter<GenericRecord> {

    private final DataFileWriter<GenericRecord> dataFileWriter;

    public AvroItemWriter(File outputFile, Schema avroSchema) throws IOException {
        this.dataFileWriter = new DataFileWriter<>(new GenericDatumWriter<>(avroSchema));
        dataFileWriter.create(avroSchema, outputFile);
    }

    @Override
    public void write(List<? extends GenericRecord> items) throws Exception {
        for (GenericRecord item : items) {
            dataFileWriter.append(item);
        }
    }

    public void close() throws IOException {
        dataFileWriter.close();
    }
}








@Bean(name = "csvToAvroConversionJob")
public Job csvToAvroConversionJob(JobRepository jobRepository, Step step) {
    return new JobBuilder("csvToAvroConversionJob", jobRepository)
        .start(step)
        .build();
}

@Bean(name = "csvToAvroConversionStep")
public Step csvToAvroConversionStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) {
    return new StepBuilder("csvToAvroConversionStep", jobRepository)
        .<YourCustomRecord, GenericRecord>chunk(100)
        .reader(csvItemReader())  // Custom CSV ItemReader
        .processor(csvToAvroProcessor())  // Custom Processor
        .writer(avroItemWriter())  // Custom Avro Writer
        .transactionManager(transactionManager)
        .build();
}
