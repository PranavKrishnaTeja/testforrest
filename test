package com.schwab.cdt.spos.source.job.step.reader;

import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemReader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test")
@Import({SposStreamingClient.class, SposItemReader.class})
public class SposItemReaderTest {

    @Autowired
    private SposStreamingClient sposStreamingClient;

    private ItemReader<GenericRecord> sposItemReader;

    @BeforeEach
    void setUp() throws Exception {
        String documentId = "affiliateaccount_2023-07-27.avro";
        sposItemReader = new SposItemReader(sposStreamingClient, documentId);
        ((SposItemReader) sposItemReader).open(new ExecutionContext());
    }

    @Test
    void testRead() throws Exception {
        GenericRecord record = sposItemReader.read();
        assertThat(record).isNotNull();
        // Further assertions can be added based on expected record values
    }

    @Test
    void testOpen() throws Exception {
        ((SposItemReader) sposItemReader).open(new ExecutionContext());
        // Verify if the stream was successfully opened
        assertThat(sposItemReader.read()).isNotNull();
    }

    @Test
    void testClose() throws Exception {
        ((SposItemReader) sposItemReader).close();
        // Verify if the stream was successfully closed
        assertThat(((SposItemReader) sposItemReader).doRead()).isNull();
    }
}
