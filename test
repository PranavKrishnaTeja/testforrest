import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import javax.persistence.EntityManager;
import javax.persistence.Query;

class H2DBConnectorTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private TestSqlQueries testSqlQueries;

    @Mock
    private Query query;

    @InjectMocks
    private H2DBConnector h2DBConnector;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRetriveEvents() {
        String eventId = "testEventId";
        EventsDTO expectedEvent = new EventsDTO();
        
        // Mocking the behavior of testSqlQueries
        when(testSqlQueries.getFetchEvents()).thenReturn("SELECT * FROM Events WHERE eventId = :eventId");
        
        // Mocking the behavior of entityManager and query
        when(entityManager.createNativeQuery(anyString(), eq(EventsDTO.class))).thenReturn(query);
        when(query.setParameter(eq("EVENT_ID"), eq(eventId))).thenReturn(query);
        when(query.getSingleResult()).thenReturn(expectedEvent);

        // Call the method
        EventsDTO actualEvent = h2DBConnector.retriveEvents(eventId);

        // Assertions
        assertNotNull(actualEvent);
        assertEquals(expectedEvent, actualEvent);

        // Verify that the methods were called with the correct parameters
        verify(entityManager).createNativeQuery("SELECT * FROM Events WHERE eventId = :eventId", EventsDTO.class);
        verify(query).setParameter("EVENT_ID", eventId);
        verify(query).getSingleResult();
    }
}