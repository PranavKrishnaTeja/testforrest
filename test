@Test
void testWrite_CallsBuildBoundStatementAndExecutesSuccessfully() throws InterruptedException {
    // Create the Metadata mock
    AggregateFactory.Metadata metadata = mock(AggregateFactory.Metadata.class);
    when(metadata.value()).thenReturn("12345");  // Example value for the column
    when(metadata.sourceType()).thenReturn("string");  // Example type

    // Create the Columns mock
    AggregateFactory.Columns column = mock(AggregateFactory.Columns.class);
    when(column.name()).thenReturn("affiliateAccountId");  // Example column name
    when(column.metadata()).thenReturn(metadata);

    // Create the Table mock
    AggregateFactory.Table table = mock(AggregateFactory.Table.class);
    when(table.name()).thenReturn("affiliateAccountBalance");  // Example table name
    when(table.columns()).thenReturn(Arrays.asList(column));  // Add the column to the table

    // Create the Aggregate mock
    AggregateFactory.Aggregate aggregate = mock(AggregateFactory.Aggregate.class);
    when(aggregate.table()).thenReturn(table);
    when(aggregate.sql()).thenReturn("INSERT INTO affiliateAccountBalance (affiliateAccountId) VALUES (:affiliateAccountId)");  // Example SQL

    // Mock the BoundStatement and other dependencies
    PreparedStatement preparedStatement = mock(PreparedStatement.class);
    BoundStatement boundStatement = mock(BoundStatement.class);

    when(session.prepare(any(SimpleStatement.class))).thenReturn(preparedStatement);
    when(preparedStatement.bind()).thenReturn(boundStatement);

    // Create a chunk of items
    Chunk<AggregateFactory.Aggregate> chunk = new Chunk<>(Arrays.asList(aggregate));

    // Invoke the write method
    cassandraItemWriter.write(chunk);

    // Verify that the session.executeAsync() method was called with the expected BoundStatement
    verify(session, times(1)).executeAsync(boundStatement);

    // Additional assertions to verify the BoundStatement's state
    assertNotNull(boundStatement);
    verify(boundStatement, times(1)).setString("affiliateAccountId", "12345");  // Verify if the correct value is set in the BoundStatement
}