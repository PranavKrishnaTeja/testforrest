package com.schwab.cdt.spos.source.job.step.writer;

import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.cql.AsyncResultSet;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.schwab.cdt.spos.source.config.cassandra.CassandraConfig;
import com.schwab.cdt.spos.source.job.aggregate.AggregateFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletionStage;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CassandraItemWriterTest {

    @Mock
    private CqlSession session;

    @Mock
    private CassandraConfig cassandraConfig;

    @Mock
    private PreparedStatement preparedStatement;

    @Mock
    private BoundStatement boundStatement;

    @Mock
    private CompletionStage<AsyncResultSet> completionStage;

    @InjectMocks
    private CassandraItemWriter cassandraItemWriter;

    @BeforeEach
void setUp() {
    MockitoAnnotations.openMocks(this);
    
    // Mocking the CqlSession and BoundStatement
    when(session.prepare(any(SimpleStatement.class))).thenReturn(preparedStatement);
    when(preparedStatement.bind()).thenReturn(boundStatement);
    when(session.executeAsync(any(BoundStatement.class))).thenReturn(completionStage);

    // Mocking the Aggregate and its methods
    AggregateFactory.Table table = mock(AggregateFactory.Table.class);
    AggregateFactory.Columns columns = mock(AggregateFactory.Columns.class);
    AggregateFactory.Metadata metadata = mock(AggregateFactory.Metadata.class);

    when(aggregate.table()).thenReturn(table);
    when(table.columns()).thenReturn(List.of(columns));
    when(columns.name()).thenReturn("column");
    when(columns.metadata()).thenReturn(metadata);
    when(metadata.value()).thenReturn(new BigDecimal("100.00"));

    // Mocking the buildPreparedStatement method if it's in CassandraItemWriter
    when(cassandraItemWriter.buildPreparedStatement(any(AggregateFactory.Aggregate.class)))
        .thenReturn(preparedStatement);
}

@Test
void testWrite() {
    // Arrange
    List<AggregateFactory.Aggregate> aggregates = new ArrayList<>();
    aggregates.add(aggregate);

    // Act
    cassandraItemWriter.write(new Chunk<>(aggregates));

    // Assert
    ArgumentCaptor<BoundStatement> boundStatementCaptor = ArgumentCaptor.forClass(BoundStatement.class);
    verify(session).executeAsync(boundStatementCaptor.capture());

    BoundStatement capturedStatement = boundStatementCaptor.getValue();
    assertEquals(new BigDecimal("100.00"), capturedStatement.getBigDecimal("column"));
}