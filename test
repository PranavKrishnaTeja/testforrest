import com.schwab.pce.common.logging.eli.enums.ServiceCallType;
import com.schwab.pce.common.logging.eli.LogRecord;
import com.schwab.pce.slf4j.logging.EliLogger;
import com.schwab.cdt.spos.source.config.LoggingConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

class LogRecordCreatorTest {

    @Mock
    private EliLogger eliLogger;

    @Mock
    private LoggingConfig loggingConfig;

    @InjectMocks
    private LogRecordCreator logRecordCreator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testToOutbound() {
        // Arrange
        String message = "Outbound test message";
        String operation = "testOperation";
        LocalDateTime executionStartTime = LocalDateTime.now();
        Map<String, Object> data = new HashMap<>();
        Exception ex = null;
        ServiceCallType serviceCallType = ServiceCallType.REST;
        String serviceKey = "testServiceKey";
        String url = "testUrl";
        String port = "8080";
        Long byteSent = 1024L;

        // Act
        logRecordCreator.toOutBound(message, operation, executionStartTime, data, ex, serviceCallType, serviceKey, url, port, byteSent);

        // Assert
        ArgumentCaptor<LogRecord> logRecordCaptor = ArgumentCaptor.forClass(LogRecord.class);
        verify(eliLogger).log(logRecordCaptor.capture());
        LogRecord capturedLogRecord = logRecordCaptor.getValue();

        assertEquals(message, capturedLogRecord.getResults().getMessage());
        assertEquals(serviceCallType, capturedLogRecord.getService().getServiceCallType());
        assertEquals(serviceKey, capturedLogRecord.getService().getServiceKey());
        assertEquals(url, capturedLogRecord.getService().getUrl());
        assertEquals(port, capturedLogRecord.getService().getPort());
        assertEquals(byteSent, capturedLogRecord.getService().getBytesSent());
    }

    @Test
    void testToInbound() {
        // Arrange
        String message = "Inbound test message";
        String operation = "testOperation";
        LocalDateTime executionStartTime = LocalDateTime.now();
        Map<String, Object> data = new HashMap<>();
        Exception ex = null;
        ServiceCallType serviceCallType = ServiceCallType.RPC;
        String serviceKey = "testServiceKey";
        String url = "testUrl";
        String port = "8080";
        Long byteSent = 2048L;

        // Act
        logRecordCreator.toInbound(message, operation, executionStartTime, data, ex, serviceCallType, serviceKey, url, port, byteSent);

        // Assert
        ArgumentCaptor<LogRecord> logRecordCaptor = ArgumentCaptor.forClass(LogRecord.class);
        verify(eliLogger).log(logRecordCaptor.capture());
        LogRecord capturedLogRecord = logRecordCaptor.getValue();

        assertEquals(message, capturedLogRecord.getResults().getMessage());
        assertEquals(serviceCallType, capturedLogRecord.getService().getServiceCallType());
        assertEquals(serviceKey, capturedLogRecord.getService().getServiceKey());
        assertEquals(url, capturedLogRecord.getService().getUrl());
        assertEquals(port, capturedLogRecord.getService().getPort());
        assertEquals(byteSent, capturedLogRecord.getService().getBytesSent());
    }
}
