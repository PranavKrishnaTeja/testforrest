package com.schwab.cdt.spos.source.job.step.reader;

import com.schwab.cdt.spos.source.service.StreamService;
import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.apache.avro.file.DataFileStream;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.ExecutionContext;

import java.io.IOException;
import java.io.PipedInputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class SposItemReaderTest {

    private SposItemReader sposItemReader;

    @Mock
    private SposStreamingClient sposStreamingClient;

    @Mock
    private StreamService streamService;

    @Mock
    private DataFileStream<GenericRecord> dataFileStream;

    @Mock
    private GenericRecord genericRecord;

    private PipedInputStream pipedInputStream;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        pipedInputStream = new PipedInputStream();
        sposItemReader = new SposItemReader(sposStreamingClient, "test-documentId");

        // Use reflection to set private fields
        setField(sposItemReader, "pipedInputStream", pipedInputStream);
        setField(sposItemReader, "dataFileStream", dataFileStream);
        setField(sposItemReader, "streamService", streamService);
    }

    private void setField(Object target, String fieldName, Object value) throws Exception {
        var field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testDoOpen() throws Exception {
        doNothing().when(streamService).run();
        whenNew(DataFileStream.class).withArguments(pipedInputStream, new GenericDatumReader<>()).thenReturn(dataFileStream);
        
        sposItemReader.open(new ExecutionContext());
        
        assertNotNull(sposItemReader);
        verify(streamService, times(1)).run();
    }

    @Test
    public void testDoRead() throws Exception {
        when(dataFileStream.hasNext()).thenReturn(true, false);
        when(dataFileStream.next()).thenReturn(genericRecord);

        sposItemReader.open(new ExecutionContext());

        GenericRecord result = sposItemReader.read();
        assertNotNull(result);
        assertEquals(genericRecord, result);

        result = sposItemReader.read();
        assertNull(result);

        sposItemReader.close();
    }

    @Test
    public void testDoClose() throws Exception {
        sposItemReader.open(new ExecutionContext());
        sposItemReader.close();
        verify(dataFileStream, times(1)).close();
    }
}
