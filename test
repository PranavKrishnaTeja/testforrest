package com.schwab.cdt.spos.source.job.step.reader;

import com.schwab.cdt.spos.source.service.StreamService;
import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.apache.avro.file.DataFileStream;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.ExecutionContext;

import java.io.PipedInputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class SposItemReaderTest {

    private SposItemReader sposItemReader;

    @Mock
    private SposStreamingClient sposStreamingClient;

    @Mock
    private DataFileStream<GenericRecord> dataFileStream;

    @Mock
    private StreamService streamService;

    private PipedInputStream pipedInputStream;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        pipedInputStream = mock(PipedInputStream.class);
        sposItemReader = spy(new SposItemReader(sposStreamingClient, "test-documentId"));

        // Use reflection to set the pipedInputStream and dataFileStream fields
        var pipedInputStreamField = SposItemReader.class.getDeclaredField("pipedInputStream");
        pipedInputStreamField.setAccessible(true);
        pipedInputStreamField.set(sposItemReader, pipedInputStream);

        var dataFileStreamField = SposItemReader.class.getDeclaredField("dataFileStream");
        dataFileStreamField.setAccessible(true);
        dataFileStreamField.set(sposItemReader, dataFileStream);
    }

    @Test
    public void testDoOpen() throws Exception {
        doNothing().when(streamService).run();
        sposItemReader.open(new ExecutionContext());
        assertNotNull(sposItemReader);
        verify(sposItemReader, times(1)).open(any());
    }

    @Test
    public void testDoRead() throws Exception {
        GenericRecord record = mock(GenericRecord.class);
        when(dataFileStream.hasNext()).thenReturn(true, false);
        when(dataFileStream.next()).thenReturn(record);

        GenericRecord result = sposItemReader.read();
        assertNotNull(result);
        assertEquals(record, result);

        result = sposItemReader.read();
        assertNull(result);
    }

    @Test
    public void testDoClose() throws Exception {
        sposItemReader.close();
        verify(dataFileStream, times(1)).close();
    }
}
