@Test
void testWriteSuccess() {
    AggregateFactory.Aggregate mockAggregate = createMockAggregate();
    Chunk<AggregateFactory.Aggregate> chunk = new Chunk<>(Collections.singletonList(mockAggregate));

    when(mockSession.prepare(any(SimpleStatement.class))).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.bind()).thenReturn(mockBoundStatement);
    setupBoundStatementMock();

    // Properly initializing the CompletionStage to avoid NullPointerException
    CompletableFuture<AsyncResultSet> mockCompletionStage = CompletableFuture.completedFuture(mock(AsyncResultSet.class));
    when(mockSession.executeAsync(any(BoundStatement.class))).thenReturn(mockCompletionStage);

    // Debugging statements
    System.out.println("PreparedStatement: " + mockPreparedStatement);
    System.out.println("BoundStatement: " + mockBoundStatement);
    System.out.println("CompletionStage: " + mockCompletionStage);

    assertDoesNotThrow(() -> cassandraItemWriter.write(chunk));

    verify(mockSession, times(1)).executeAsync(any(BoundStatement.class));
}

@Test
void testWriteFailure() {
    AggregateFactory.Aggregate mockAggregate = createMockAggregate();
    Chunk<AggregateFactory.Aggregate> chunk = new Chunk<>(Collections.singletonList(mockAggregate));

    when(mockSession.prepare(any(SimpleStatement.class))).thenReturn(mockPreparedStatement);
    when(mockPreparedStatement.bind()).thenReturn(mockBoundStatement);
    setupBoundStatementMock();

    // Simulate an exception during async execution
    CompletableFuture<AsyncResultSet> mockCompletionStage = new CompletableFuture<>();
    mockCompletionStage.completeExceptionally(new RuntimeException("Simulated Exception"));
    when(mockSession.executeAsync(any(BoundStatement.class))).thenReturn(mockCompletionStage);

    // Debugging statements
    System.out.println("PreparedStatement: " + mockPreparedStatement);
    System.out.println("BoundStatement: " + mockBoundStatement);
    System.out.println("CompletionStage: " + mockCompletionStage);

    assertThrows(UnableToWriteToCassandraException.class, () -> cassandraItemWriter.write(chunk));
}