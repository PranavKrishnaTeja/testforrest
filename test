@Component
public class FilteringService {

    // Existing code...

    public boolean shouldSkipLineBasedOnStartingCharacters(String schemaName, String line) {
        SchemaMapping schemaMapping = schemaConfigProperties.getMappingDetails().get(schemaName);
        if (schemaMapping == null || schemaMapping.getSkipPolicy() == null) {
            return false;
        }

        List<String> skipStartsWithValues = schemaMapping.getSkipPolicy().getSkipRowsStartingWith();
        if (CollectionUtils.isEmpty(skipStartsWithValues)) {
            return false;
        }

        for (String value : skipStartsWithValues) {
            if (line.startsWith(value)) {
                return true; // Skip this line
            }
        }

        return false; // Do not skip
    }

    // Existing methods...
}











@Service
public class DelimitedDataConversionServiceImpl extends AbstractDataConversionService {

    // Existing code...

    public GenericData.Record createAvroRecordFromPayload(String payload, FileUploadRequest fileUploadRequest, Schema avroSchema) {
        SchemaMapping schemaMapping = getAndValidateSchemaMapping(fileUploadRequest.getSourceSchemaName());

        // New skip policy check
        if (filteringService.shouldSkipLineBasedOnStartingCharacters(fileUploadRequest.getSourceSchemaName(), payload)) {
            return null; // Skip this line
        }

        String[] tokens = payload.split(Pattern.quote(schemaMapping.getDelimiter().getSymbol()));

        // Trim tokens if necessary
        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = tokens[i].trim();
        }

        // Existing skip logic based on field values
        if (filteringService.shouldSkipForDelimitedLine(fileUploadRequest.getSourceSchemaName(), Arrays.asList(tokens))) {
            return null; // Skip this record
        }

        if (tokens.length > schemaMapping.getFieldMappingList().size()) {
            throw new AvroRecordGenerationException("Expected number of fields: " + schemaMapping.getFieldMappingList().size() + ", actual: " + tokens.length);
        }

        return writeRecord(avroSchema, schemaMapping, tokens);
    }

    // Existing methods...
}