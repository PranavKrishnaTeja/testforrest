package com.schwab.express.common.gateway.security;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import schwab.endpoint.security.BackendUnavailableException;
import schwab.endpoint.security.SecurityToken;
import schwab.endpoint.security.UnauthorizedMessageException;
import schwab.endpoint.security.http.PolicyBasedMessageAuthenticator;
import schwab.endpoint.security.svcreg.EnterprisePolicyRepository;
import schwab.endpoint.security.KeyService;

@Component
public class TransitionPolicyBasedMessageAuthenticator extends PolicyBasedMessageAuthenticator {

    @Value("${tokenClientId:Customer Account Technology}")
    String tokenClientId;

    public TransitionPolicyBasedMessageAuthenticator(EnterprisePolicyRepository repo, @Qualifier("keyService") KeyService ks) {
        super(repo, ks);
    }

    @Override
    public SecurityToken authenticate(String serviceKey, String operation, String authorization, long clockSkewSeconds)
            throws UnauthorizedMessageException, BackendUnavailableException {
        SecurityToken token = super.authenticate(authorization, clockSkewSeconds);
        this.checkPolicy(serviceKey, operation, token, null);
        return token;
    }

    @Override
    protected void checkPolicy(String serviceKey, String operation, SecurityToken bearer, SecurityToken signature)
            throws UnauthorizedMessageException {

        SecurityToken securityToken = (signature != null ? signature : bearer);
        String clientId = securityToken.getClientId();

        if (!clientId.equalsIgnoreCase(tokenClientId)) {
            throw new UnauthorizedMessageException("Unauthorized Token Passed");
        }
    }
}
