import com.schwab.cdt.spos.source.config.CsvToAvroConfig;
import com.schwab.cdt.spos.source.config.IngestionJobConfig;
import com.schwab.cdt.spos.source.service.CsvToAvroConverter;
import com.schwab.cdt.spos.source.job.step.CsvToAvroConversionStep;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.batch.core.*;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CsvToAvroConversionStepTest {

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager transactionManager;

    @Mock
    private CsvToAvroConverter csvToAvroConverter;

    @Mock
    private CsvToAvroConfig csvToAvroConfig;

    @Mock
    private IngestionJobConfig ingestionJobConfig;

    @InjectMocks
    private CsvToAvroConversionStep csvToAvroConversionStep;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCsvToAvroConversionStep_Success() throws Exception {
        // Mock job parameters
        Map<String, Object> jobParametersMap = new HashMap<>();
        jobParametersMap.put("jobName", "testJob");
        jobParametersMap.put("directory", "testDirectory");

        StepExecution stepExecution = new StepExecution("csvToAvroConversionStep", new JobExecution(1L));
        stepExecution.getExecutionContext().put("jobName", "testJob");
        stepExecution.getExecutionContext().put("directory", "testDirectory");

        // Mock chunk context
        ChunkContext chunkContext = new ChunkContext(new StepContext(stepExecution));

        // Mock job and conversion configurations
        IngestionJobConfig.Job jobConfig = new IngestionJobConfig.Job("testJob", "testTargetId");
        when(ingestionJobConfig.jobs()).thenReturn(Collections.singletonList(jobConfig));

        CsvToAvroConfig.Conversion conversion = new CsvToAvroConfig.Conversion();
        conversion.setName("testDirectory");
        when(csvToAvroConfig.getConversions()).thenReturn(Collections.singletonList(conversion));

        // Build the step
        Step step = csvToAvroConversionStep.csvToAvroConversionStep();

        // Extract the tasklet
        Tasklet tasklet = ((org.springframework.batch.core.step.builder.TaskletStep) step).getTasklet();

        // Execute the tasklet
        RepeatStatus status = tasklet.execute(null, chunkContext);

        // Verify that the converter is called
        verify(csvToAvroConverter).convertCsvToAvro(conversion, "testTargetId");

        // Verify that the step completed successfully
        assertEquals(RepeatStatus.FINISHED, status);
    }

    @Test
    void testCsvToAvroConversionStep_JobNotFound() {
        // Mock job parameters
        Map<String, Object> jobParametersMap = new HashMap<>();
        jobParametersMap.put("jobName", "nonExistentJob");
        jobParametersMap.put("directory", "testDirectory");

        StepExecution stepExecution = new StepExecution("csvToAvroConversionStep", new JobExecution(1L));
        stepExecution.getExecutionContext().put("jobName", "nonExistentJob");
        stepExecution.getExecutionContext().put("directory", "testDirectory");

        // Mock chunk context
        ChunkContext chunkContext = new ChunkContext(new StepContext(stepExecution));

        // Mock empty job configurations
        when(ingestionJobConfig.jobs()).thenReturn(Collections.emptyList());

        // Build the step
        Step step = csvToAvroConversionStep.csvToAvroConversionStep();

        // Extract the tasklet
        Tasklet tasklet = ((org.springframework.batch.core.step.builder.TaskletStep) step).getTasklet();

        // Execute the tasklet and expect an exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            tasklet.execute(null, chunkContext);
        });

        // Verify exception message
        assertTrue(exception.getMessage().contains("Job nonExistentJob not found"));

        // Verify that the converter is not called
        verifyNoInteractions(csvToAvroConverter);
    }
}
