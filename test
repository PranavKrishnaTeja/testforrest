import com.schwab.cdt.spos.source.constant.Transformation;
import com.schwab.cdt.spos.source.job.aggregate.AggregateFactory;
import org.apache.avro.generic.GenericRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Value;

import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class SposItemProcessorTest {

    @Mock
    private AggregateFactory aggregateFactory;
    
    @Mock
    private GenericRecord genericRecord;

    private SposItemProcessor sposItemProcessor;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(aggregateFactory.aggregates()).thenReturn(Collections.singletonList(
                new AggregateFactory.Aggregate("householdingbalances", 
                        new AggregateFactory.SourceSchema("sourceSchema"),
                        new AggregateFactory.Table("targetId", List.of(
                                new AggregateFactory.Columns("affiliateAccountId", 
                                        new AggregateFactory.Metadata(null, "string", "afltAcctId", Transformation.NONE, null)),
                                new AggregateFactory.Columns("unavailableAsset", 
                                        new AggregateFactory.Metadata(null, "decimal", "unavailAssetAmt", Transformation.AVRO_DECIMAL_TO_BIG_DECIMAL, 2))
                        )),
                        "sql")
        ));
        
        this.sposItemProcessor = new SposItemProcessor(aggregateFactory, "targetId", "householdingbalances_documentId");
    }

    @Test
    public void testProcess() throws Exception {
        when(genericRecord.get("afltAcctId")).thenReturn("12345");
        when(genericRecord.get("unavailAssetAmt")).thenReturn(ByteBuffer.wrap(BigDecimal.valueOf(100.00).unscaledValue().toByteArray()));

        AggregateFactory.Aggregate result = sposItemProcessor.process(genericRecord);

        assertEquals("householdingbalances", result.name());
        assertEquals("sourceSchema", result.sourceSchema().name());
        assertEquals("targetId", result.table().name());
        assertEquals("12345", result.table().columns().get(0).metadata().value());
        assertEquals(BigDecimal.valueOf(100.00).setScale(2), result.table().columns().get(1).metadata().value());
    }

    // Additional test cases for other scenarios can be added here

}