package com.schwab.brokerage.eventhub.rabbit.handler;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Envelope;
import com.schwab.brokerage.eventhub.rabbit.connector.RabbitMqConnector;
import com.schwab.brokerage.eventhub.rabbit.logger.LogMessageDetails;
import com.schwab.brokerage.eventhub.rabbit.logger.PubHubLogger;
import com.schwab.brokerage.eventhub.rabbit.service.RabbitPublisherService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import schwab.discovery.health.AvailabilityReport;
import schwab.messaging.client.InvalidMessageException;
import schwab.messaging.client.rabbitmq.Message;
import schwab.messaging.client.rabbitmq.MessageHandler;
import schwab.rrbus.ServiceContext;

import java.util.List;

@Component
@AllArgsConstructor
public class BatchMessageHandler extends MessageHandler {

    private final PubHubLogger pubHubLogger;
    private final RabbitPublisherService rabbitPublisherService;
    private final RabbitMqConnector rabbitMqConnector;

    @SuppressWarnings("squid:S1181")
    public void handleDelivery(Channel channel, Envelope envelope, AMQP.BasicProperties properties, byte[] body) {
        ReceivedMessage message = null;

        LogMessageDetails logMessageDetails = LogMessageDetails.builder().operation("handleDelivery").build();
        ModernizedEvent modernizedEvent = new ModernizedEvent(channel, envelope, logMessageDetails, pubHubLogger);
        try {
            message = receiveMessageFromContext(envelope, properties, body);
            modernizedEvent.setCorrelationId(message.getCorrelationId());
            pubHubLogger.updateLogDetailsFromMessage(logMessageDetails, message, envelope.isRedeliver());

            if (!StringUtils.hasText(message.getText())) throw new InvalidMessageException("message text is empty");

            List<ModernEvent> modernEvents = rabbitPublisherService.buildModernizedEvents(message, modernizedEvent);
            for (ModernEvent event : modernEvents) {
                rabbitMqConnector.queueMessage(modernizedEvent);
            }

        } catch (Throwable t) { // exceptions at this point can only be caused by invalid data
            pubHubLogger.addMessagetoSecureLog(message, modernizedEvent);
            modernizedEvent.nack(t);
        } finally {
            ServiceContext.clear(); // from Vals code do not remove
        }
    }

    @Override
    public AvailabilityReport checkHealth() {
        return new AvailabilityReport();
    }

    ReceivedMessage receiveMessageFromContext(Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws InvalidMessageException {
        try {
            Message.initServiceContext(properties); // from Vals code do not remove
            return new ReceivedMessage(properties, body, envelope.getRoutingKey());
        } catch (Exception e) {
            throw new InvalidMessageException(e);
        }
    }

    public Acknowledgement getAcknowledgement() {
        return Acknowledgement.Manual;
    }
}
