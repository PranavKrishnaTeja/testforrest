@Component
public class CsvToAvroConverter {

    public void convertCsvToAvro(String csvFilePath, String schemaFilePath, String avroFilePath, String delimiter, String asOfDate) throws IOException {
        // Load Avro schema from file
        Schema schema = new Schema.Parser().parse(new File(schemaFilePath));

        // Create Avro writer
        DatumWriter<GenericRecord> datumWriter = new GenericDatumWriter<>(schema);
        try (DataFileWriter<GenericRecord> dataFileWriter = new DataFileWriter<>(datumWriter)) {
            dataFileWriter.create(schema, new File(avroFilePath));

            // Open CSV file and read records
            try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
                String line;
                List<String> headers = null;

                while ((line = br.readLine()) != null) {
                    String[] values = line.split(delimiter, -1); // Include trailing empty strings
                    if (headers == null) {
                        // First line contains headers
                        headers = Arrays.asList(values);
                    } else {
                        // Create Avro record and set fields
                        GenericRecord record = new GenericData.Record(schema);

                        // Set asOfDate from job parameter
                        if (asOfDate == null || asOfDate.isEmpty()) {
                            throw new IllegalArgumentException("asOfDate parameter is required and cannot be null or empty.");
                        }
                        record.put("asOfDate", asOfDate);

                        for (int i = 0; i < headers.size(); i++) {
                            String fieldName = headers.get(i);
                            Schema.Field field = schema.getField(fieldName);
                            Schema fieldSchema = field.schema();
                            String csvValue = i < values.length ? values[i] : null;
                            Object convertedValue = convertValue(csvValue, fieldSchema);
                            record.put(fieldName, convertedValue);
                        }
                        dataFileWriter.append(record);
                    }
                }
            }
        }
    }

    private Object convertValue(String value, Schema fieldSchema) {
        Schema actualSchema = getNonNullSchema(fieldSchema);

        // Handle null values
        if (value == null || value.isEmpty()) {
            return null;
        }

        switch (actualSchema.getType()) {
            case INT:
                if (actualSchema.getLogicalType() != null && "date".equals(actualSchema.getLogicalType().getName())) {
                    // Convert date string to days since epoch
                    LocalDate date = LocalDate.parse(value, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    return (int) date.toEpochDay();
                }
                return Integer.parseInt(value);
            case LONG:
                return Long.parseLong(value);
            case FLOAT:
                return Float.parseFloat(value);
            case DOUBLE:
                return Double.parseDouble(value);
            case BOOLEAN:
                return Boolean.parseBoolean(value);
            case STRING:
                return value;
            case BYTES:
                if (actualSchema.getLogicalType() != null && "decimal".equals(actualSchema.getLogicalType().getName())) {
                    // Convert string to BigDecimal and then to bytes
                    BigDecimal decimalValue = new BigDecimal(value);
                    LogicalTypes.Decimal decimalType = (LogicalTypes.Decimal) actualSchema.getLogicalType();
                    return new Conversions.DecimalConversion().toBytes(
                        decimalValue,
                        actualSchema,
                        decimalType
                    );
                }
                return value.getBytes();
            default:
                throw new UnsupportedOperationException("Unsupported field type: " + actualSchema.getType());
        }
    }

    private Schema getNonNullSchema(Schema schema) {
        if (schema.getType() == Schema.Type.UNION) {
            for (Schema type : schema.getTypes()) {
                if (type.getType() != Schema.Type.NULL) {
                    return type;
                }
            }
            throw new IllegalArgumentException("No non-null type found in union schema: " + schema);
        } else {
            return schema;
        }
    }
}