import com.schwab.cdt.spos.source.config.CsvToAvroConfig;
import com.schwab.cdt.spos.source.config.IngestionJobConfig;
import com.schwab.cdt.spos.source.service.CsvToAvroConverter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.scope.context.StepSynchronizationManager;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.job.JobParametersBuilder;
import org.springframework.batch.core.step.job.StepContribution;
import org.springframework.transaction.PlatformTransactionManager;

import static org.mockito.Mockito.*;

class CsvToAvroConversionStepTest {

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager transactionManager;

    @Mock
    private CsvToAvroConverter csvToAvroConverter;

    @Mock
    private CsvToAvroConfig csvToAvroConfig;

    @Mock
    private IngestionJobConfig ingestionJobConfig;

    @InjectMocks
    private CsvToAvroConversionStep csvToAvroConversionStep;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testCsvToAvroConversionStep_success() throws Exception {
        // Arrange
        CsvToAvroConfig.Conversion conversion = new CsvToAvroConfig.Conversion("test-conversion");
        when(csvToAvroConfig.getConversions()).thenReturn(List.of(conversion));
        IngestionJobConfig.Job job = new IngestionJobConfig.Job("test-job", "test-source-dir");
        when(ingestionJobConfig.jobs()).thenReturn(List.of(job));

        StepExecution stepExecution = new StepExecution("test-step", new JobExecution(1L));
        StepSynchronizationManager.register(stepExecution);
        
        JobParameters jobParameters = new JobParametersBuilder()
            .addString("jobName", "test-job")
            .addString("directory", "test-conversion")
            .toJobParameters();
        stepExecution.setJobParameters(jobParameters);

        // Mocking contribution and context
        StepContribution contribution = mock(StepContribution.class);
        ChunkContext chunkContext = mock(ChunkContext.class);
        when(chunkContext.getStepContext()).thenReturn(mock(StepContext.class));

        // Act
        Step step = csvToAvroConversionStep.csvToAvroConversionStep();
        step.execute(contribution, chunkContext);

        // Assert
        verify(csvToAvroConverter, times(1)).convertCsvToAvro(conversion, "test-source-dir");
    }

    // Other test cases...
}