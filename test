import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.charset.StandardCharsets;
import java.io.File;

public class ReadFixture {

    public static String readFixture(String path) throws IOException {
        // Print the current working directory
        String currentDir = System.getProperty("user.dir");
        System.out.println("Current working directory: " + currentDir);
        
        // List and print all files in the directory two levels up
        File upperDirectory = new File(currentDir + "/../../");
        File[] filesList = upperDirectory.listFiles();
        
        System.out.println("Contents of the directory two levels up (../../):");
        if (filesList != null) {
            for (File file : filesList) {
                System.out.println(file.getAbsolutePath());
            }
        } else {
            System.out.println("The directory is empty or does not exist.");
        }
        
        // Print the relative path provided
        System.out.println("Relative path provided: " + path);
        
        // Construct the full path where the file should be located
        Path fullPath = Paths.get("src/test/resources/fixtures/", path);
        
        // Print the absolute path it is trying to find the file in
        System.out.println("Absolute path where it is trying to find the file: " + fullPath.toAbsolutePath());

        // Read the file content
        byte[] encoded = Files.readAllBytes(fullPath);
        
        // Return the content as a string
        return new String(encoded, StandardCharsets.UTF_8);
    }
}