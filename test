import static org.mockito.Mockito.*;

@Test
void testWrite_SetsLastUpdatedTimestampAndExecutesSuccessfully() throws InterruptedException {
    // Mock the metadata and columns as before
    AggregateFactory.Metadata metadata = mock(AggregateFactory.Metadata.class);
    when(metadata.value()).thenReturn("12345");
    when(metadata.sourceType()).thenReturn("string");

    AggregateFactory.Columns column = mock(AggregateFactory.Columns.class);
    when(column.name()).thenReturn("affiliateAccountId");
    when(column.metadata()).thenReturn(metadata);

    AggregateFactory.Table table = mock(AggregateFactory.Table.class);
    when(table.name()).thenReturn("affiliateAccountBalance");
    when(table.columns()).thenReturn(Arrays.asList(column));

    AggregateFactory.Aggregate aggregate = mock(AggregateFactory.Aggregate.class);
    when(aggregate.table()).thenReturn(table);
    when(aggregate.sql()).thenReturn("INSERT INTO affiliateAccountBalance (affiliateAccountId) VALUES (:affiliateAccountId)");

    // Mock BoundStatement and other dependencies
    PreparedStatement preparedStatement = mock(PreparedStatement.class);
    BoundStatement boundStatement = mock(BoundStatement.class);

    when(session.prepare(any(SimpleStatement.class))).thenReturn(preparedStatement);
    when(preparedStatement.bind()).thenReturn(boundStatement);

    // Stubbing to simulate setting values in BoundStatement
    when(boundStatement.setString(anyString(), anyString())).thenReturn(boundStatement);
    when(boundStatement.set(anyString(), any(Instant.class), eq(Instant.class))).thenReturn(boundStatement);

    // Create a chunk of items
    Chunk<AggregateFactory.Aggregate> chunk = new Chunk<>(Arrays.asList(aggregate));

    // Invoke the write method
    cassandraItemWriter.write(chunk);

    // Verify that BoundStatement has been correctly populated
    verify(boundStatement).setString("affiliateAccountId", "12345");
    verify(boundStatement).set(CassandraItemWriter.LAST_UPDATED_TIMESTAMP, Instant.now(), Instant.class);

    // Ensure the statement is executed
    verify(session).executeAsync(boundStatement);
}