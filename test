// src/test/java/com/schwab/cdt/spos/source/config/TestConfig.java

package com.schwab.cdt.spos.source.config;

import com.schwab.cdt.spos.source.job.step.reader.SposItemReader;
import com.schwab.cdt.spos.source.job.step.processor.SposItemProcessor;
import com.schwab.cdt.spos.source.job.step.writer.PostgresItemWriter;
import com.schwab.cdt.spos.source.job.step.writer.CassandraItemWriter;
import com.schwab.cdt.spos.source.spos.SposStreamingClient;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.batch.item.ItemReader;
import org.apache.avro.generic.GenericRecord;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.context.annotation.Primary;

import static org.mockito.Mockito.when;

@TestConfiguration
@Import({ApplicationConfig.class, DataIngestionJobBuilder.class, DataIngestionStepBuilder.class}) // Ensure to import your main configurations here
public class TestConfig {

    @MockBean
    private SposStreamingClient sposStreamingClient;

    @MockBean
    private PostgresItemWriter postgresItemWriter;

    @MockBean
    private CassandraItemWriter cassandraItemWriter;

    @Bean
    @StepScope
    @Primary
    public ItemReader<GenericRecord> sposItemReader(@Value("#{jobParameters['documentId']}") String documentId) throws Exception {
        var sposItemReader = new SposItemReader(sposStreamingClient, documentId);
        sposItemReader.setName("sposItemReader");
        sposItemReader.open(new ExecutionContext());
        sposItemReader.setSaveState(false);
        return sposItemReader;
    }

    // Mocking the behavior of sposStreamingClient for testing
    @Bean
    public void setupMockSposStreamingClient() throws Exception {
        when(sposStreamingClient.getObjectSize("test_document.avro")).thenReturn(1000L);
        when(sposStreamingClient.getObjectWithByteRange("test_document.avro", 0, 1000)).thenReturn(new byte[1000]);
    }
}


















// src/test/java/com/schwab/cdt/spos/source/job/DataIngestionJobTest.java

package com.schwab.cdt.spos.source.job;

import com.schwab.cdt.spos.source.config.TestConfig;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@ExtendWith(SpringExtension.class)
@SpringBatchTest
@SpringBootTest(classes = {TestConfig.class})
@ActiveProfiles("test")
public class DataIngestionJobTest {

    @Autowired
    private JobLauncherTestUtils jobLauncherTestUtils;

    @Autowired
    private Job postgresDataIngestionJob;

    @Test
    public void testPostgresDataIngestionJob() throws Exception {
        JobParametersBuilder jobParametersBuilder = new JobParametersBuilder();
        jobParametersBuilder.addString("documentId", "test_document.avro");
        jobParametersBuilder.addLong("startTime", System.currentTimeMillis());

        JobExecution jobExecution = jobLauncherTestUtils.getJobLauncher().run(postgresDataIngestionJob, jobParametersBuilder.toJobParameters());

        assertNotNull(jobExecution);
        assertEquals("COMPLETED", jobExecution.getExitStatus().getExitCode());
    }
}